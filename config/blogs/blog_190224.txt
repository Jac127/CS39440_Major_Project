19-02-24:
Added nucleotide pair checks. Unless the food and snake head have matching pairs the food segment will not be
considered correct. For example A-T and G-C pairs are correct, but A-A pairs are not. An issue experienced in
development: Forgot that not every character matches the ones next to it, to solve this I check the last three
nucleotides instead of the last two, and check if there is at least a matching pair.

Issue: The current way of checking matching pairs also picks up on pairs that are not actually related to each other, to
fix this I added not statements to avoid false positives in incomplete pairs. This approach did not work added attempt
at fix to issue comment for future reference. I believe I have fixed it by only checking if the nucleotides are valid
when the string length is divisible by 2. This ensures that we are checking complete pairs and removes the risk of false
positives.


When adding the multiple food sources, I decided that only one of the food items needs to be a correct answer, so I
add one food item that has the correct answer and the other nucleotide is chosen randomly for the second food.

Now facing a major bug, the snake appears to eat food when it does not intersect with it - "if (x1 < food_one_x +
snake_block and x1 + snake_block > food_one_x and y1 < food_one_y + snake_block) or (x1 < food_two_x + snake_block and
x1 + snake_block > food_two_x and y1 < food_two_y + snake_block):" appeared to be the problem, however I do not know
why, for now I have replaced it with a collision detection system, but I should look into it further.

My code now needs major refactoring as the prototype development has led to bad code practices.


20-02-24:
Began adding the GUI element to show the player their progress. It sits along the bottom of the screen, I have changed
the height values of the game, so that the snake and food can no longer be below the GUI region. Changing the algorithm
that finds matching pairs, the function now returns a string of bools that can be used to colour the string displayed to
 the player, representing the correct and incorrect choices.

Found issue with invalid nucleotide detection, if a sequence of character is like xyx, or ata, or gcg then there is a
chance that no correct food options will be presented to the player.

Need to add win condition when the player reaches a length of 30 nucleotides. For the saving feature, I would also like
to show the player the accuracy of the DNA eating (sampling) and this will affect their score, somehow I would like to
calculate a percentage score. This should also be shown if the player loses the game.

Added the win condition, and the DNA string is saved when it is reached, the player is asked if they want to play again
or quit. In the future I will add the score and length to the CSV files too, which will help with later games as well as
incentive the player to beat their score. On the webpage that the game is hosted on stats and scores will be displayed
and made available.

22-02-24
Fixed aforementioned bug. Done by remodelling the way food nucleotides are selected, if there are an even number of
nucleotides the string that means that the pairs are complete, which means any food type can be generated, otherwise
one food item will be set to the correct nucleotide.

Refactoring:
    Food variables now stored in a list, this includes the nucleotide char, so the code now converts between in and char
    when needed.
    Reorganised several things to make more readable
